namespace ProductAPI is
    use System.Random;
    use System.DateOnly;
    use System.DateTime;
    use System.IServiceProvider;
    use System.Uri;

    use Collections.LIST;

    use Microsoft.AspNetCore.Builder;
    use Microsoft.AspNetCore.Http;

    use Microsoft.OpenApi.Models;

    use Swashbuckle.AspNetCore.Swagger.SwaggerOptions;
    use Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions;

    // extension methods:
    use Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.map_delete;
    use Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.map_get;
    use Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.map_post;
    use Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.map_put;
    use Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.map_methods;

    use Microsoft.AspNetCore.Builder.HttpsPolicyBuilderExtensions.use_https_redirection;
    use Microsoft.AspNetCore.Builder.OpenApiEndpointConventionBuilderExtensions.with_open_api;
    use Microsoft.AspNetCore.Builder.RoutingEndpointConventionBuilderExtensions.with_name;
    use Microsoft.AspNetCore.Builder.SwaggerBuilderExtensions.use_swagger;
    use Microsoft.AspNetCore.Builder.SwaggerUIBuilderExtensions.use_swagger_u_i;
    use Microsoft.Extensions.DependencyInjection.EndpointMetadataApiExplorerServiceCollectionExtensions.add_endpoints_api_explorer;
    use Microsoft.Extensions.DependencyInjection.SwaggerGenOptionsExtensions.swagger_doc;
    use Microsoft.Extensions.DependencyInjection.SwaggerGenServiceCollectionExtensions.add_swagger_gen;
    use Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.add_singleton;


    use Microsoft.Extensions.Hosting.HostEnvironmentEnvExtensions.is_development;

    entry(args: string[]) is
        let builder = WebApplication.create_builder(args);

        add_singleton[ProductStore,IN_MEMORY_PRODUCT_STORE](
            builder.services, 
            (provider: IServiceProvider) => IN_MEMORY_PRODUCT_STORE()
        );

        add_endpoints_api_explorer(builder.services);
        add_swagger_gen(builder.services, config is 
            let info = OpenApiInfo();

            info.title = "Product Store";
            info.version = "v1";

            swagger_doc(config, "v1", info);
        si);

        let app = builder.build();

        if is_development(app.environment) then
            use_swagger(app, cast SwaggerOptions -> void(null));
            use_swagger_u_i(app, cast SwaggerUIOptions -> void(null));
        fi

        use_https_redirection(app);

        let post_product =
            map_post(
                app, 
                "/products", 
                (store: ProductStore, product: PRODUCT) =>
                    let id = store.create_product(product) in
                    Results.created("/products/{id}", product)
            );

        with_name(post_product, "PostProduct");
        with_open_api(post_product);


        let get_product =
            map_get(
                app, 
                "/products/{{index}}",
                (store: ProductStore, index: int) =>
                    let result = store.get_product(index) in
                    if result? then
                        Results.ok(result)
                    else
                        Results.not_found(null)
                    fi
            );

        with_name(get_product, "GetProduct");
        with_open_api(get_product);


        let put_product =
            map_put(
                app,
                "/products/{{index}}",
                (store: ProductStore, index: int, product: PRODUCT) =>
                    if store.update_product(index, product) then
                        Results.ok(null)
                    else
                        Results.not_found(null)
                    fi
            );

        with_name(put_product, "PutProduct");
        with_open_api(put_product);


        let delete_product =
            map_delete(
                app,
                "/products/{{index}}",
                (store: ProductStore, index: int) =>
                    if store.delete_product(index) then
                        Results.ok(null)
                    else
                        Results.not_found(null)
                    fi
            );

        with_name(delete_product, "DeleteProduct");
        with_open_api(delete_product);

        app.run(null);
    si

    @IL.name("Product")
    class PRODUCT is
        name: string;
        price: double; // we don't have decimal

        init() is        
        si
    si

si