
use System.Random;
use System.DateOnly;
use System.DateTime;
use System.Uri;

use Microsoft.AspNetCore.Builder;

use Microsoft.OpenApi.Models;

use Swashbuckle.AspNetCore.Swagger.SwaggerOptions;
use Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions;

// extension methods:
use Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions.map_get;
use Microsoft.AspNetCore.Builder.HttpsPolicyBuilderExtensions.use_https_redirection;
use Microsoft.AspNetCore.Builder.OpenApiEndpointConventionBuilderExtensions.with_open_api;
use Microsoft.AspNetCore.Builder.RoutingEndpointConventionBuilderExtensions.with_name;
use Microsoft.AspNetCore.Builder.SwaggerBuilderExtensions.use_swagger;
use Microsoft.AspNetCore.Builder.SwaggerUIBuilderExtensions.use_swagger_u_i;
use Microsoft.Extensions.DependencyInjection.EndpointMetadataApiExplorerServiceCollectionExtensions.add_endpoints_api_explorer;
use Microsoft.Extensions.DependencyInjection.SwaggerGenOptionsExtensions.swagger_doc;
use Microsoft.Extensions.DependencyInjection.SwaggerGenServiceCollectionExtensions.add_swagger_gen;
use Microsoft.Extensions.Hosting.HostEnvironmentEnvExtensions.is_development;


entry(args: string[]) is
    let builder = WebApplication.create_builder(args);

    add_endpoints_api_explorer(builder.services);
    add_swagger_gen(builder.services, config is 
        let info = OpenApiInfo();

        info.title = "Weather Forecast";
        info.version = "v1";

        swagger_doc(config, "v1", info);
    si);

    let app = builder.build();

    if is_development(app.environment) then
        use_swagger(app, cast SwaggerOptions -> void(null));
        use_swagger_u_i(app, cast SwaggerUIOptions -> void(null));
    fi

    use_https_redirection(app);

    let summaries = ["Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"];

    let route_handler_builder =
        map_get(app, "/weatherforecast", () =>
            (1::5) | 
                .map(index =>
                    WEATHER_FORECAST(
                        DateOnly.from_date_time(DateTime.now.add_days(cast double(index))),
                        Random.shared.next(-20, 55),
                        summaries[Random.shared.next(summaries.count)]
                    )
                )
                .collect_array()
        );

    with_name(
        route_handler_builder,
        "GetWeatherForecast"
    );

    with_open_api(route_handler_builder);

    app.run(null);
si

@IL.name("WeatherForecast")
class WEATHER_FORECAST is
    date: DateOnly;

    @IL.name("temperatureC")
    temperature_c: int;

    @IL.name("temperatureF")
    temperature_f: int => 32 + cast int(cast single(temperature_c) / 0.5556);

    summary: string;

    init(
        date: DateOnly,
        temperature_c: int,
        summary: string
    ) is
        self.date = date;
        self.temperature_c = temperature_c;
        self.summary = summary;
    si
si